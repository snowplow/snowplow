#!/usr/bin/env ruby

# Copyright (c) 2012-2017 Snowplow Analytics Ltd. All rights reserved.
#
# This program is licensed to you under the Apache License Version 2.0,
# and you may not use this file except in compliance with the Apache License Version 2.0.
# You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the Apache License Version 2.0 is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

# Author::    Alex Dean (mailto:support@snowplowanalytics.com)
# Copyright:: Copyright (c) 2012-2014 Snowplow Analytics Ltd
# License::   Apache License Version 2.0

# Don't edit $LOAD_PATH, go straight to main Ruby file
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'snowplow-emr-etl-runner'))

# Initialization
runner = Snowplow::EmrEtlRunner
fatal = runner::Monitoring::Logging.method(:fatal_with)

# This Ruby script runs the ETL (extract, transform, load)
# process which transforms the raw Snowplow event logs into
# Snowplow-formatted Hive data tables, optimised for analysis.
#
# This is a three-step process:
# 1. Transfer the raw Snowplow event logs from the In Bucket to the Processing Bucket
# 2. Run the Hive ETL process on the logs using Amazon EMR (populates processed Snowplow events into the Out Bucket)
# 3. Archive the processed event logs from Processing Bucket to Archive Bucket
#
# Note that each step is only actioned if the previous step succeeded without error.
begin

  cmd, args, config, enrichments, resolver, targets = runner::Cli.get_args_config_enrichments_resolver()

  if cmd == 'run'
    r = runner::Runner.new(args, config, enrichments, resolver, targets)
    r.run()
  elsif cmd.start_with?('generate')
    puts "The generate command is not supported yet"
    #emr_config_filename = 'emr-config.json'
    #emr_playbook_filename = 'emr-playbook.json'
    #if cmd == 'generate emr-config'
    #  version = args[:schemaver].nil? ? '1-1-0' : args[:schemaver]
    #  filename = args[:filename].nil? ? emr_config_filename : args[:filename]
    #  runner::EmrConfigGenerator.new.generate(config, resolver, version, filename)
    #  puts "Generated #{filename}"
    #else
    #  debug = args[:debug]
    #  skip = args[:skip]
    #  if cmd == 'generate emr-playbook'
    #    version = args[:schemaver].nil? ? '1-0-0' : args[:schemaver]
    #    filename = args[:filename].nil? ? emr_playbook_filename : args[:filename]
    #    runner::EmrPlaybookGenerator.new
    #      .generate(config, resolver, version, filename, debug, skip, enrichments)
    #    puts "Generated #{filename}"
    #  else
    #    runner::EmrConfigGenerator.new.generate(config, resolver, '1-1-0', emr_config_filename)
    #    puts "Generated #{emr_config_filename}"
    #    runner::EmrPlaybookGenerator.new
    #      .generate(config, resolver, '1-0-0', emr_playbook_filename, debug, skip, enrichments)
    #    puts "Generated #{emr_playbook_filename}"
    #  end
    #end
  else
    res = runner::Linter.lint(resolver)
    if res.is_a?(runner::LinterError)
      raise res
    else
      puts "Valid Iglu resolver config"
    end
    if cmd == 'lint enrichments' or cmd == 'lint all'
      errors = res.lint_enrichments(enrichments)
      if errors.empty?
        puts "Valid enrichments"
      else
        raise runner::LinterError.new(
          "Invalid enrichments:\n #{errors.map { |e| e.message }.join("\n")}")
      end
    end
  end

# Don't print stack trace for configuration errors
rescue runner::ConfigError => e
  $stderr.puts(e.message)
  exit 1
rescue runner::LinterError => e
  $stderr.puts(e.message)
  exit 1
rescue runner::LockHeldError => e
  puts "#{e.message}"
  exit 17
rescue runner::EmrClusterStateError => e
  puts "#{e.message}"
  exit 18
# Special retval so rest of pipeline knows not to continue
rescue runner::NoDataToProcessError => e
  puts "No logs to process: #{e.message}"
  exit 3
# Special retval to flag previous pipeline is unfinished
rescue runner::DirectoryNotEmptyError => e
  puts "There seems to be an ongoing run of EmrEtlRunner: #{e.message}"
  exit 4
# Catch any Snowplow error
rescue runner::Error => e
  fatal.call(e)
  exit 1
rescue SystemExit => e
  exit e.status
end

exit 0 # Success
