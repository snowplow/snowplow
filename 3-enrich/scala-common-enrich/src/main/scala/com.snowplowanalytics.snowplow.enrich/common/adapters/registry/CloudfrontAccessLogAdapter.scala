/*
 * Copyright (c) 2014 Snowplow Analytics Ltd. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
package com.snowplowanalytics
package snowplow
package enrich
package common
package adapters
package registry

// Iglu
import iglu.client.{
  SchemaKey,
  Resolver
}

// Scalaz
import scalaz._
import Scalaz._

// Joda-Time
import org.joda.time.DateTime

// json4s
import org.json4s._
import org.json4s.JsonDSL._
import org.json4s.jackson.JsonMethods._

// This project
import loaders.{
  CollectorPayload,
  CollectorContext
}

/**
 * Transforms a Cloudfront access log into raw events
 */
object CloudfrontAccessLogAdapter {

  /**
   * Adapter for Cloudfront web distribution access log files
   */
  object WebDistribution extends Adapter {

    private val fieldNames = List(
      "dateTime",
      "xEdgeLocation",
      "scBytes",
      "cIp",
      "csMethod",
      "csHost",
      "csUriStem",
      "scStatus",
      "csReferer",
      "csUserAgent",
      "csUriQuery",
      "csCookie",
      "xEdgeResultType",
      "xEdgeRequestId",
      "xHostHeader",
      "csProtocol",
      "csBytes",
      "timeTaken"
    )

    // Tracker version for Cloudfront access log
    private val TrackerVersion = "com.amazon.aws.cloudfront/wd_access_log"

    /**
     * Converts a CollectorPayload instance into raw events.
     * Chooses a wd_access_log schema version based on the length of the TSV
     * Extracts the collector timestamp and IP address from the TSV
     *
     * @param payload Generated by the TsvLoader. Its body is the raw TSV.
     * @param resolver (implicit) The Iglu resolver used for
     *        schema lookup and validation. Not used
     * @return a validation boxing either a NEL of raw events or a NEL of failure strings
     */
    def toRawEvents(payload: CollectorPayload)(implicit resolver: Resolver): ValidatedRawEvents = {
      payload.body match {
        case Some(p) => {
          val fields = p.split("\t", -1)
          val schemaVersion = fields.size match {
            case 12 => "1-0-0".successNel  // Before 12 Sep 2012
            case 15 => "1-0-1".successNel  // 12 Sep 2012
            case 18 => "1-0-2".successNel  // 21 Oct 2013
            case 19 => "1-0-3".successNel  // 29 Apr 2014
            case n => s"Access log TSV line contained $n fields, expected 12, 15, 18, or 19".failNel
          }
          schemaVersion.flatMap(v => {
            val schemaCompatibleFields = "%sT%sZ".format(fields(0), fields(1)) :: fields.toList.tail.tail
            val validatedTstamp = toTimestamp(fields(0), fields(1)).map(Some(_)).toValidationNel
            for {
              tstamp <- validatedTstamp
            } yield {
              val ip = schemaCompatibleFields(3) match {
                case "" => None
                case nonempty => nonempty.some
              }
              val ueJson = fieldNames.zip(schemaCompatibleFields).foldLeft(JObject())(_~_)

              val parameters = toUnstructEventParams(
                TrackerVersion,
                Map[String, String](),
                s"iglu:com.amazon.aws.cloudfront/wd_access_log/jsonschema/$v",
                ueJson,
                "srv"
                )
              NonEmptyList(RawEvent(
                api          = payload.api,
                parameters   = parameters,
                contentType  = payload.contentType,
                source       = payload.source,
                context      = CollectorContext(tstamp, ip, None, None, Nil, None)
              ))
            }
          })
        }
        case None => "Cloudfront TSV has no body - this should be impossible".failNel
      }
    }

    /**
     * Converts a CloudFront log-format date and
     * a time to a timestamp.
     *
     * @param date The CloudFront log-format date
     * @param time The CloudFront log-format time
     * @return the timestamp as a Joda DateTime
     *         or an error String, all wrapped in
     *         a Scalaz Validation
     */
    def toTimestamp(date: String, time: String): Validation[String, DateTime] =
      try {
        DateTime.parse("%sT%s+00:00".format(date, time)).success // Construct a UTC ISO date from CloudFront date and time
      } catch {
        case e => "Unexpected exception converting Cloudfront web distribution access log date [%s] and time [%s] to timestamp: [%s]".format(date, time, e.getMessage).fail
      }

  }
}
