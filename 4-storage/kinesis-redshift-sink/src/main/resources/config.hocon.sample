# Default configuration for kinesis-lzo-s3-sink

sink {

  # The following are used to authenticate for the Amazon Kinesis sink.
  #
  # If both are set to 'default', the default provider chain is used
  # (see http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html)
  #
  # If both are set to 'iam', use AWS IAM Roles to provision credentials.
  #
  # If both are set to 'env', use environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
  aws {
    access-key: ""
    secret-key: ""
  }

  kinesis {
    in {
      # Kinesis input stream name
      stream-name: "SnowplowEnriched"

      # LATEST: most recent data.
      # TRIM_HORIZON: oldest available data.
      # Note: This only affects the first run of this application
      # on a stream.
      initial-position: "TRIM_HORIZON"
    }

    out {
      # Stream for events for which the storage process fails
      stream-name: "SnowplowRedshiftBad"
    }

    region: "ap-southeast-2"

    # "app-name" is used for a DynamoDB table to maintain stream state.
    # You can set it automatically using: "SnowplowLzoS3Sink-$\\{sink.kinesis.in.stream-name\\}"
    app-name: "KinesisRedshiftApp"
  }

  redshift {
    # Connection parameters
    url: "jdbc:postgresql://...../snowplow"
    username: ""
    password: ""
    table: ""

    # Used when no specific DB schema is associated with json
    defaultSchema: ""

   # Allows to define the mapping between appId and DB schemas, so that the events get
   # inserted into different tables depending on which application they belong to
    appIdToSchema {
      test: "test"
    }
  }

  # Events are accumulated in a buffer before being sent to S3.
  # The buffer is emptied whenever:
  # - the combined size of the stored records exceeds byte-limit or
  # - the number of stored records exceeds record-limit or
  # - the time in milliseconds since it was last emptied exceeds time-limit
  buffer {
    byte-limit: 4000000
    record-limit: 500
    time-limit: 60000
  }

  # The S3 location of the jsonpaths, similar to what is typically given to the storage loader
  jsonpaths: "http://digdeep-snowplow-hosted-assets.s3-website-ap-southeast-2.amazonaws.com"

  # Iglu config, verbatim JSON, add your repository below
  iglu_config: """{
                   "schema": "iglu:com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-0",
                   "data": {
                     "cacheSize": 500,
                     "repositories": [
                       {
                         "name": "Iglu Central",
                         "priority": 0,
                         "vendorPrefixes": [
                           "com.snowplowanalytics"
                         ],
                         "connection": {
                           "http": {
                             "uri": "http://iglucentral.com"
                           }
                         }
                       }
                     ]
                   }
               }"""

}
