#!/usr/bin/env ruby

# Copyright (c) 2012-2014 Snowplow Analytics Ltd. All rights reserved.
#
# This program is licensed to you under the Apache License Version 2.0,
# and you may not use this file except in compliance with the Apache License Version 2.0.
# You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the Apache License Version 2.0 is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

# Author::    Alex Dean (mailto:support@snowplowanalytics.com)
# Copyright:: Copyright (c) 2012-2014 Snowplow Analytics Ltd
# License::   Apache License Version 2.0

# Don't edit $LOAD_PATH, go straight to main Ruby file
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'snowplow-storage-loader'))
loader = Snowplow::StorageLoader

# This Ruby script runs the Snowplow StorageLoader.
#
# This is a four-step process:
#
# 1. Download Snowplow event files from S3 (only if 1+ storage targets are local e.g. Postgres)
# 2. Load Snowplow event files (either local or remote) into storage target
# 3. Archive event files in S3
# 4. Delete local Snowplow event files (only if 1+ storage targets are local e.g. Postgres)
begin
  config = loader::Config.get_config()

  # Download files if required
  unless config[:skip].include?('download')
    if config[:download_required]
      loader::S3Tasks.download_events(config)
    end
  end

  # If we are not skipping the load, use the appropriate
  # loader for Redshift or Postgres
  unless config[:skip].include?('load')

    # Loop through all targets
    config[:storage][:targets].each { |t|
      case t[:type]
        when 'redshift'
          loader::RedshiftLoader.load_events_and_shredded_types(config, t)
        when 'postgres'
          loader::PostgresLoader.load_events(config[:storage][:download][:folder], t, config[:skip], config[:include])
      end
    }
  end

  # Archive
  unless config[:skip].include?('archive')
    loader::S3Tasks.archive_files(config)
  end

  # Delete local files if required
  unless config[:skip].include?('delete')
    if config[:download_required]
      loader::FileTasks.delete_events(config[:storage][:download][:folder])
    end
  end

  puts "Completed successfully"

# Catch any Snowplow error
rescue loader::Error => e
  $stderr.puts(e.message)
  exit 1
rescue SystemExit => e
  exit 1
rescue Exception => e
  $stderr.puts("Unexpected error: " + e.message)
  $stderr.puts(e.backtrace.join("\n"))
  exit 1
end

exit 0 # Success
